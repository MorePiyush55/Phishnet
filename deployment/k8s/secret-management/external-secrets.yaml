# External Secrets Operator Configuration for PhishNet

apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: phishnet-secret-store
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
spec:
  provider:
    # AWS Secrets Manager
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: aws-secret-manager-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-secret-manager-credentials
            key: secret-access-key
    
    # Alternative: Azure Key Vault
    # azurekv:
    #   vaultUrl: "https://phishnet-keyvault.vault.azure.net/"
    #   authSecretRef:
    #     clientId:
    #       name: azure-secret-sp
    #       key: ClientID
    #     clientSecret:
    #       name: azure-secret-sp
    #       key: ClientSecret
    
    # Alternative: Google Secret Manager
    # gcpsm:
    #   projectId: "phishnet-production"
    #   auth:
    #     secretRef:
    #       secretAccessKey:
    #         name: gcpsm-secret
    #         key: secret-access-credentials

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: phishnet-app-secrets
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
spec:
  secretStoreRef:
    name: phishnet-secret-store
    kind: SecretStore
  target:
    name: phishnet-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        SECRET_KEY: "{{ .SECRET_KEY }}"
        ENCRYPTION_KEY: "{{ .ENCRYPTION_KEY }}"
        WEBHOOK_SECRET: "{{ .WEBHOOK_SECRET }}"
        GMAIL_CLIENT_ID: "{{ .GMAIL_CLIENT_ID }}"
        GMAIL_CLIENT_SECRET: "{{ .GMAIL_CLIENT_SECRET }}"
        VIRUSTOTAL_API_KEY: "{{ .VIRUSTOTAL_API_KEY }}"
        ABUSEIPDB_API_KEY: "{{ .ABUSEIPDB_API_KEY }}"
        GEMINI_API_KEY: "{{ .GEMINI_API_KEY }}"
  data:
  - secretKey: SECRET_KEY
    remoteRef:
      key: phishnet/app
      property: secret_key
  - secretKey: ENCRYPTION_KEY
    remoteRef:
      key: phishnet/app
      property: encryption_key
  - secretKey: WEBHOOK_SECRET
    remoteRef:
      key: phishnet/app
      property: webhook_secret
  - secretKey: GMAIL_CLIENT_ID
    remoteRef:
      key: phishnet/gmail
      property: client_id
  - secretKey: GMAIL_CLIENT_SECRET
    remoteRef:
      key: phishnet/gmail
      property: client_secret
  - secretKey: VIRUSTOTAL_API_KEY
    remoteRef:
      key: phishnet/external-apis
      property: virustotal_key
  - secretKey: ABUSEIPDB_API_KEY
    remoteRef:
      key: phishnet/external-apis
      property: abuseipdb_key
  - secretKey: GEMINI_API_KEY
    remoteRef:
      key: phishnet/external-apis
      property: gemini_key
  refreshInterval: 15m

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: phishnet-database-secrets
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: database
spec:
  secretStoreRef:
    name: phishnet-secret-store
    kind: SecretStore
  target:
    name: phishnet-database-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        postgres-password: "{{ .POSTGRES_PASSWORD }}"
        redis-password: "{{ .REDIS_PASSWORD }}"
  data:
  - secretKey: POSTGRES_PASSWORD
    remoteRef:
      key: phishnet/database
      property: postgres_password
  - secretKey: REDIS_PASSWORD
    remoteRef:
      key: phishnet/database
      property: redis_password
  refreshInterval: 15m

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: phishnet-monitoring-secrets
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: monitoring
spec:
  secretStoreRef:
    name: phishnet-secret-store
    kind: SecretStore
  target:
    name: phishnet-monitoring-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        grafana-admin-password: "{{ .GRAFANA_ADMIN_PASSWORD }}"
        slack-webhook-url: "{{ .SLACK_WEBHOOK_URL }}"
        pagerduty-routing-key: "{{ .PAGERDUTY_ROUTING_KEY }}"
  data:
  - secretKey: GRAFANA_ADMIN_PASSWORD
    remoteRef:
      key: phishnet/monitoring
      property: grafana_admin_password
  - secretKey: SLACK_WEBHOOK_URL
    remoteRef:
      key: phishnet/monitoring
      property: slack_webhook_url
  - secretKey: PAGERDUTY_ROUTING_KEY
    remoteRef:
      key: phishnet/monitoring
      property: pagerduty_routing_key
  refreshInterval: 15m

---
# ClusterSecretStore for multi-namespace secret access
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: phishnet-cluster-secret-store
  labels:
    app.kubernetes.io/name: phishnet
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: aws-secret-manager-credentials
            key: access-key-id
            namespace: external-secrets-system
          secretAccessKey:
            name: aws-secret-manager-credentials
            key: secret-access-key
            namespace: external-secrets-system

---
# Secret rotation policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-policy
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
data:
  policy.yaml: |
    rotation:
      enabled: true
      schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
      secrets:
        - name: SECRET_KEY
          type: random
          length: 64
          rotation_interval: "90d"
        - name: ENCRYPTION_KEY
          type: random
          length: 32
          rotation_interval: "90d"
        - name: WEBHOOK_SECRET
          type: random
          length: 32
          rotation_interval: "90d"
      
      # Sensitive API keys should be rotated manually
      manual_rotation:
        - GMAIL_CLIENT_SECRET
        - VIRUSTOTAL_API_KEY
        - ABUSEIPDB_API_KEY
        - GEMINI_API_KEY
