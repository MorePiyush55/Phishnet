# Database Backup and Recovery Configuration

# PostgreSQL Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: database-backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: phishnet
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 999  # postgres user
            fsGroup: 999
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            imagePullPolicy: IfNotPresent
            command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              # Environment setup
              export TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              export BACKUP_FILE="phishnet_backup_${TIMESTAMP}.sql.gz"
              export PGPASSWORD="${POSTGRES_PASSWORD}"
              
              echo "Starting backup at $(date)"
              echo "Backup file: ${BACKUP_FILE}"
              
              # Create backup
              pg_dump -h postgres -p 5432 -U phishnet_user -d phishnet \
                --verbose --format=custom --compress=9 \
                --file="/backups/${BACKUP_FILE}"
              
              # Verify backup
              pg_restore --list "/backups/${BACKUP_FILE}" > /dev/null
              
              # Calculate backup size and checksum
              BACKUP_SIZE=$(stat -c%s "/backups/${BACKUP_FILE}")
              BACKUP_CHECKSUM=$(sha256sum "/backups/${BACKUP_FILE}" | cut -d' ' -f1)
              
              # Create metadata file
              cat > "/backups/${BACKUP_FILE}.meta" <<EOF
              {
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "database": "phishnet",
                "backup_type": "full",
                "size_bytes": ${BACKUP_SIZE},
                "checksum_sha256": "${BACKUP_CHECKSUM}",
                "retention_days": 30,
                "format": "custom",
                "compression": 9
              }
              EOF
              
              echo "Backup completed successfully"
              echo "Size: $(( BACKUP_SIZE / 1024 / 1024 )) MB"
              echo "Checksum: ${BACKUP_CHECKSUM}"
              
              # Upload to cloud storage (S3/GCS/Azure)
              if [ ! -z "${CLOUD_STORAGE_BUCKET:-}" ]; then
                echo "Uploading to cloud storage: ${CLOUD_STORAGE_BUCKET}"
                aws s3 cp "/backups/${BACKUP_FILE}" "s3://${CLOUD_STORAGE_BUCKET}/database/${BACKUP_FILE}"
                aws s3 cp "/backups/${BACKUP_FILE}.meta" "s3://${CLOUD_STORAGE_BUCKET}/database/${BACKUP_FILE}.meta"
              fi
              
              # Cleanup old backups (keep last 30 days)
              find /backups -name "phishnet_backup_*.sql.gz" -type f -mtime +30 -delete
              find /backups -name "phishnet_backup_*.sql.gz.meta" -type f -mtime +30 -delete
              
              echo "Backup process completed at $(date)"
            env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: phishnet-database-secrets
                  key: postgres-password
            - name: CLOUD_STORAGE_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: backup-config
                  key: storage-bucket
                  optional: true
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            - name: aws-credentials
              mountPath: /root/.aws
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "500m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
          - name: aws-credentials
            secret:
              secretName: aws-backup-credentials
              optional: true

---
# Redis Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: redis-backup
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: phishnet
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: redis-backup
            image: redis:7-alpine
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              export TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              export BACKUP_FILE="redis_backup_${TIMESTAMP}.rdb"
              
              echo "Starting Redis backup at $(date)"
              
              # Create Redis backup using BGSAVE
              redis-cli -h redis -a "${REDIS_PASSWORD}" BGSAVE
              
              # Wait for backup to complete
              while [ "$(redis-cli -h redis -a "${REDIS_PASSWORD}" LASTSAVE)" = "$(redis-cli -h redis -a "${REDIS_PASSWORD}" LASTSAVE)" ]; do
                sleep 5
              done
              
              # Copy backup file
              redis-cli -h redis -a "${REDIS_PASSWORD}" --rdb "/backups/${BACKUP_FILE}"
              
              # Compress backup
              gzip "/backups/${BACKUP_FILE}"
              
              # Create metadata
              BACKUP_SIZE=$(stat -c%s "/backups/${BACKUP_FILE}.gz")
              BACKUP_CHECKSUM=$(sha256sum "/backups/${BACKUP_FILE}.gz" | cut -d' ' -f1)
              
              cat > "/backups/${BACKUP_FILE}.gz.meta" <<EOF
              {
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                "service": "redis",
                "backup_type": "full",
                "size_bytes": ${BACKUP_SIZE},
                "checksum_sha256": "${BACKUP_CHECKSUM}",
                "retention_days": 7
              }
              EOF
              
              echo "Redis backup completed: ${BACKUP_FILE}.gz"
              echo "Size: $(( BACKUP_SIZE / 1024 / 1024 )) MB"
              
              # Cleanup old backups (keep last 7 days)
              find /backups -name "redis_backup_*.rdb.gz" -type f -mtime +7 -delete
              find /backups -name "redis_backup_*.rdb.gz.meta" -type f -mtime +7 -delete
            env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: phishnet-database-secrets
                  key: redis-password
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage

---
# Backup Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-storage
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi

---
# Backup Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: backup
data:
  retention-policy.yaml: |
    retention:
      database:
        daily: 30    # Keep daily backups for 30 days
        weekly: 12   # Keep weekly backups for 12 weeks
        monthly: 12  # Keep monthly backups for 12 months
      redis:
        daily: 7     # Keep daily backups for 7 days
        weekly: 4    # Keep weekly backups for 4 weeks
      audit_logs:
        daily: 90    # Keep audit logs for 90 days
        archive: 2555 # Archive for 7 years (legal requirement)
  
  storage-bucket: "phishnet-backups-prod"
  encryption-enabled: "true"
  compression-level: "9"
  
  # Recovery procedures
  recovery-procedures.md: |
    # PhishNet Backup Recovery Procedures
    
    ## Database Recovery
    
    ### Full Database Restore
    1. Stop all application services
    2. Identify the backup file to restore from
    3. Verify backup integrity
    4. Restore database
    5. Restart services
    
    ```bash
    # Stop services
    kubectl scale deployment phishnet-api --replicas=0 -n phishnet
    kubectl scale deployment phishnet-worker-email --replicas=0 -n phishnet
    kubectl scale deployment phishnet-worker-analysis --replicas=0 -n phishnet
    
    # Restore database
    kubectl exec -it postgres-0 -n phishnet -- bash
    pg_restore -h localhost -p 5432 -U phishnet_user -d phishnet --clean --verbose /backups/phishnet_backup_YYYYMMDD_HHMMSS.sql.gz
    
    # Restart services
    kubectl scale deployment phishnet-api --replicas=3 -n phishnet
    kubectl scale deployment phishnet-worker-email --replicas=2 -n phishnet
    kubectl scale deployment phishnet-worker-analysis --replicas=2 -n phishnet
    ```
    
    ### Point-in-Time Recovery
    1. Restore from latest full backup
    2. Apply WAL files up to the desired point in time
    3. Verify data consistency
    
    ## Redis Recovery
    1. Stop Redis service
    2. Replace RDB file
    3. Restart Redis service
    
    ```bash
    kubectl scale statefulset redis --replicas=0 -n phishnet
    # Copy backup file to Redis data volume
    kubectl scale statefulset redis --replicas=1 -n phishnet
    ```
    
    ## Disaster Recovery Checklist
    - [ ] Verify backup integrity
    - [ ] Check recovery procedures
    - [ ] Test data consistency
    - [ ] Validate application functionality
    - [ ] Update monitoring and alerting
    - [ ] Document the incident
