version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: phishnet_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: phishnet
      POSTGRES_USER: phishnet_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-phishnet_dev_pass}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../tools/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phishnet_user -d phishnet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Task Queue
  redis:
    image: redis:7-alpine
    container_name: phishnet_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-phishnet_redis_pass} --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-phishnet_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Google Cloud Pub/Sub Emulator (for local development)
  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
    container_name: phishnet_pubsub
    restart: unless-stopped
    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8085 --project=${GOOGLE_CLOUD_PROJECT_ID:-phishnet-local}
    ports:
      - "8085:8085"
    environment:
      - CLOUDSDK_CORE_PROJECT=${GOOGLE_CLOUD_PROJECT_ID:-phishnet-local}
    profiles:
      - local

  # PhishNet API Server
  phishnet-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    container_name: phishnet_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://phishnet_user:${POSTGRES_PASSWORD:-phishnet_dev_pass}@postgres:5432/phishnet
      - REDIS_URL=redis://:${REDIS_PASSWORD:-phishnet_redis_pass}@redis:6379/0
      - ENVIRONMENT=development
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - GMAIL_CLIENT_ID=${GMAIL_CLIENT_ID}
      - GMAIL_CLIENT_SECRET=${GMAIL_CLIENT_SECRET}
      - GMAIL_REDIRECT_URI=${GMAIL_REDIRECT_URI:-http://localhost:8000/api/v1/auth/oauth/gmail/callback}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID:-phishnet-local}
      - PUBSUB_EMULATOR_HOST=${PUBSUB_EMULATOR_HOST:-pubsub-emulator:8085}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - BASE_URL=${BASE_URL:-http://localhost:8000}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-dev-webhook-secret-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-encryption-key-32-chars-long}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    volumes:
      - .:/app
      - /app/phishnet_env  # Exclude virtual env from mount
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ../backend/app
          target: /app/app
        - action: rebuild
          path: ../backend/requirements.txt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phishnet-api.rule=Host(`api.phishnet.local`)"
      - "traefik.http.services.phishnet-api.loadbalancer.server.port=8000"

  # Gmail Webhook Handler
  phishnet-webhook:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    container_name: phishnet_webhook
    restart: unless-stopped
    ports:
      - "8001:8001"
    command: python -m app.services.webhook_server
    environment:
      - DATABASE_URL=postgresql+asyncpg://phishnet_user:${POSTGRES_PASSWORD:-phishnet_dev_pass}@postgres:5432/phishnet
      - REDIS_URL=redis://:${REDIS_PASSWORD:-phishnet_redis_pass}@redis:6379/0
      - ENVIRONMENT=development
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-dev-webhook-secret-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-encryption-key-32-chars-long}
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID:-phishnet-local}
      - PUBSUB_EMULATOR_HOST=${PUBSUB_EMULATOR_HOST:-pubsub-emulator:8085}
    volumes:
      - .:/app
      - /app/phishnet_env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Email Processing Workers (Multiple instances for scaling)
  phishnet-worker-email:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    container_name: phishnet_worker_email
    restart: unless-stopped
    command: python -m app.workers.email_processor
    environment:
      - DATABASE_URL=postgresql+asyncpg://phishnet_user:${POSTGRES_PASSWORD:-phishnet_dev_pass}@postgres:5432/phishnet
      - REDIS_URL=redis://:${REDIS_PASSWORD:-phishnet_redis_pass}@redis:6379/0
      - ENVIRONMENT=development
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - GMAIL_CLIENT_ID=${GMAIL_CLIENT_ID}
      - GMAIL_CLIENT_SECRET=${GMAIL_CLIENT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-encryption-key-32-chars-long}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
    volumes:
      - .:/app
      - /app/phishnet_env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2

  # Threat Analysis Workers  
  phishnet-worker-analysis:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: development
    container_name: phishnet_worker_analysis
    restart: unless-stopped
    command: python -m app.workers.threat_analyzer
    environment:
      - DATABASE_URL=postgresql+asyncpg://phishnet_user:${POSTGRES_PASSWORD:-phishnet_dev_pass}@postgres:5432/phishnet
      - REDIS_URL=redis://:${REDIS_PASSWORD:-phishnet_redis_pass}@redis:6379/0
      - ENVIRONMENT=development
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-2}
    volumes:
      - .:/app
      - /app/phishnet_env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 1

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: phishnet_redis_ui
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-phishnet_redis_pass}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    profiles:
      - tools

  # pgAdmin (Web UI for PostgreSQL)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: phishnet_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@phishnet.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - tools

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: phishnet_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/'
    profiles:
      - monitoring

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: phishnet_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: phishnet_jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # jaeger.thrift over HTTP
      - "6831:6831/udp"  # jaeger.thrift over UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/badger
    profiles:
      - monitoring

  # Elasticsearch (Log Storage)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: phishnet_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - logging

  # Kibana (Log Visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: phishnet_kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - logging

  # Logstash (Log Processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: phishnet_logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - logging

  # Traefik (Reverse Proxy & Load Balancer)
  traefik:
    image: traefik:v3.0
    container_name: phishnet_traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"  # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/traefik:/etc/traefik
      - traefik_certs:/etc/traefik/certs
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
    profiles:
      - proxy

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: phishnet_db_backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-phishnet_dev_pass}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: ["/bin/sh", "/backup.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  elasticsearch_data:
    driver: local
  traefik_certs:
    driver: local

networks:
  default:
    name: phishnet_network
    driver: bridge
