# Default values for phishnet.
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  postgresql:
    auth:
      postgresPassword: ""
      username: "phishnet_user"
      password: ""
      database: "phishnet"
  redis:
    auth:
      password: ""

# Image configuration
image:
  registry: docker.io
  repository: phishnet/api
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Environment configuration
environment: production
logLevel: INFO

# Application configuration
app:
  name: phishnet
  baseUrl: "https://phishnet.example.com"
  secretKey: ""  # Must be provided
  encryptionKey: ""  # Must be provided
  webhookSecret: ""  # Must be provided
  
  # Gmail integration
  gmail:
    clientId: ""  # Must be provided
    clientSecret: ""  # Must be provided
    redirectUri: "https://phishnet.example.com/api/v1/auth/oauth/gmail/callback"
  
  # External API keys
  externalApis:
    virustotal: ""  # Must be provided
    abuseipdb: ""   # Must be provided
    gemini: ""      # Must be provided

# API service configuration
api:
  enabled: true
  replicaCount: 3
  image:
    repository: phishnet/api
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 8000
    annotations: {}
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: api.phishnet.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: phishnet-api-tls
        hosts:
          - api.phishnet.example.com
  
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Worker configuration
workers:
  email:
    enabled: true
    replicaCount: 2
    image:
      repository: phishnet/worker
      tag: "latest"
    concurrency: 4
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
  
  analysis:
    enabled: true
    replicaCount: 2
    image:
      repository: phishnet/worker
      tag: "latest"
    concurrency: 2
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: phishnet/frontend
    tag: "latest"
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
      - host: phishnet.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: phishnet-frontend-tls
        hosts:
          - phishnet.example.com
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: ""  # Will use global value
    username: "phishnet_user"
    password: ""  # Will use global value
    database: "phishnet"
  
  primary:
    persistence:
      enabled: true
      storageClass: ""  # Will use global storageClass
      size: 20Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: ""  # Will use global value
  
  master:
    persistence:
      enabled: true
      storageClass: ""  # Will use global storageClass
      size: 5Gi
    
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
    server:
      retention: "30d"
      persistentVolume:
        enabled: true
        size: 50Gi
        storageClass: ""  # Will use global storageClass
  
  grafana:
    enabled: true
    adminPassword: ""  # Must be provided
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""  # Will use global storageClass
    
    dashboards:
      default:
        phishnet-overview:
          url: https://raw.githubusercontent.com/example/phishnet/main/monitoring/grafana/dashboards/overview.json
        phishnet-performance:
          url: https://raw.githubusercontent.com/example/phishnet/main/monitoring/grafana/dashboards/performance.json
  
  jaeger:
    enabled: false  # Optional distributed tracing

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: "30d"
  storageClass: ""  # Will use global storageClass
  storage: 100Gi

# Security configuration
security:
  networkPolicies:
    enabled: true
  
  podSecurityPolicy:
    enabled: false  # Deprecated, use Pod Security Standards
  
  serviceAccount:
    create: true
    annotations: {}
    name: ""

# Service mesh (optional)
serviceMesh:
  istio:
    enabled: false
  linkerd:
    enabled: false
