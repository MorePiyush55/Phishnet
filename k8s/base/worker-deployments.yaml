apiVersion: apps/v1
kind: Deployment
metadata:
  name: phishnet-worker-email
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: worker
    app.kubernetes.io/worker-type: email
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: phishnet
      app.kubernetes.io/component: worker
      app.kubernetes.io/worker-type: email
  template:
    metadata:
      labels:
        app.kubernetes.io/name: phishnet
        app.kubernetes.io/component: worker
        app.kubernetes.io/worker-type: email
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: phishnet-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: phishnet-worker-email
        image: phishnet/worker:latest
        command: ["python", "-m", "app.workers.email_processor"]
        ports:
        - containerPort: 8002
          name: metrics
          protocol: TCP
        env:
        - name: WORKER_TYPE
          value: "email"
        - name: WORKER_CONCURRENCY
          valueFrom:
            configMapKeyRef:
              name: phishnet-config
              key: WORKER_CONCURRENCY
        - name: DATABASE_URL
          value: "postgresql+asyncpg://phishnet_user:$(POSTGRES_PASSWORD)@postgres:5432/phishnet"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: REDIS_PASSWORD
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: ENCRYPTION_KEY
        - name: GMAIL_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: GMAIL_CLIENT_ID
        - name: GMAIL_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: GMAIL_CLIENT_SECRET
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: worker-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir: {}
      - name: worker-logs
        emptyDir: {}
      terminationGracePeriodSeconds: 120
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phishnet-worker-analysis
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: worker
    app.kubernetes.io/worker-type: analysis
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: phishnet
      app.kubernetes.io/component: worker
      app.kubernetes.io/worker-type: analysis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: phishnet
        app.kubernetes.io/component: worker
        app.kubernetes.io/worker-type: analysis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8003"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: phishnet-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: phishnet-worker-analysis
        image: phishnet/worker:latest
        command: ["python", "-m", "app.workers.threat_analyzer"]
        ports:
        - containerPort: 8003
          name: metrics
          protocol: TCP
        env:
        - name: WORKER_TYPE
          value: "analysis"
        - name: WORKER_CONCURRENCY
          value: "2"
        - name: DATABASE_URL
          value: "postgresql+asyncpg://phishnet_user:$(POSTGRES_PASSWORD)@postgres:5432/phishnet"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379/0"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: REDIS_PASSWORD
        - name: VIRUSTOTAL_API_KEY
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: VIRUSTOTAL_API_KEY
        - name: ABUSEIPDB_API_KEY
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: ABUSEIPDB_API_KEY
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: phishnet-secrets
              key: GEMINI_API_KEY
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: worker-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir: {}
      - name: worker-logs
        emptyDir: {}
      terminationGracePeriodSeconds: 120
---
apiVersion: v1
kind: Service
metadata:
  name: phishnet-worker-email
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: worker
    app.kubernetes.io/worker-type: email
spec:
  type: ClusterIP
  ports:
  - port: 8002
    targetPort: 8002
    name: metrics
  selector:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: worker
    app.kubernetes.io/worker-type: email
---
apiVersion: v1
kind: Service
metadata:
  name: phishnet-worker-analysis
  namespace: phishnet
  labels:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: worker
    app.kubernetes.io/worker-type: analysis
spec:
  type: ClusterIP
  ports:
  - port: 8003
    targetPort: 8003
    name: metrics
  selector:
    app.kubernetes.io/name: phishnet
    app.kubernetes.io/component: worker
    app.kubernetes.io/worker-type: analysis
