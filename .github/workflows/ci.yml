name: PhishNet CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: phishnet_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_enhanced.txt
        pip install pytest-cov bandit safety
    
    - name: Set up test environment
      run: |
        cp env.example .env.test
        echo "TESTING=true" >> .env.test
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/phishnet_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/1" >> .env.test
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/e2e/ -v --tb=short
    
    - name: Run security tests
      run: |
        python -m pytest tests/security/ -v --tb=short
    
    - name: Security scan with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Dependency vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
          pytest-report.xml

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t phishnet:${{ github.sha }} .
        docker build -t phishnet:latest .
    
    - name: Test Docker container
      run: |
        docker run --rm -d --name phishnet-test -p 8000:8000 phishnet:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop phishnet-test

  security-audit:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
