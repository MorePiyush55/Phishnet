# Secure Sandbox Infrastructure
# Docker Compose for local development and testing

version: '3.8'

services:
  # Redis for job queue
  redis:
    image: redis:7-alpine
    container_name: sandbox-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - sandbox_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID

  # Sandbox worker
  sandbox-worker:
    build:
      context: .
      dockerfile: Dockerfile.sandbox
    container_name: sandbox-worker-1
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      
      # Storage configuration
      - ARTIFACTS_BUCKET=phishnet-sandbox-artifacts
      - ARTIFACTS_RETENTION_DAYS=7
      
      # AWS S3 (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      
      # Google Cloud Storage (optional)
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
      
      # Worker configuration
      - WORKER_ID=worker-1
      - MAX_EXECUTION_TIME=120
      - MAX_MEMORY_MB=512
      
      # Security
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    
    volumes:
      # Mount GCS credentials if available
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:ro
      
      # Logs volume (ephemeral)
      - type: tmpfs
        target: /tmp/sandbox
        tmpfs:
          size: 100M
          mode: 0755
    
    networks:
      - sandbox_network
      - internet  # Controlled internet access
    
    # Security settings
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Required for Chromium
    
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN  # Required for Chromium sandbox
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Read-only root filesystem (except for required writable paths)
    read_only: true
    tmpfs:
      - /tmp:size=100M,mode=0755
      - /var/log:size=10M,mode=0755

  # Network security proxy (optional)
  proxy:
    image: nginx:alpine
    container_name: sandbox-proxy
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - internet
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sandbox-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - sandbox_network
    ports:
      - "9090:9090"
    security_opt:
      - no-new-privileges:true

# Networks
networks:
  sandbox_network:
    driver: bridge
    internal: true  # No external access for internal communication
    
  internet:
    driver: bridge
    # This network provides controlled internet access

# Volumes
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local

# Security and compliance
x-security-settings: &security-settings
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  read_only: true
